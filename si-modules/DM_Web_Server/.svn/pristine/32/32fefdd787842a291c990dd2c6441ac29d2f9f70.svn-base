package net.herit.business.onem2m;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;

import net.herit.business.onem2m.service.ConfigurationService;
import net.herit.business.onem2m.service.ConfigurationVO;
import net.herit.business.onem2m.service.PlatformService;
import net.herit.business.onem2m.service.PlatformVO;
import net.herit.common.conf.HeritProperties;
import net.herit.common.exception.BizException;
import net.herit.common.exception.UserSysException;
import net.herit.common.util.StringUtil;

/**
 * Handles requests for the application home page.
 */
@Controller
@RequestMapping(value="/onem2m")
public class OneM2MController {
	
	@Resource(name = "ConfigurationService")
	private ConfigurationService configurationService;

	@Resource(name = "PlatformService")
	private PlatformService platformService;

	
    @RequestMapping(value="/qos/info.do")
    public String qosInfo(ModelMap model) throws Exception {
    	
    	ConfigurationVO configurationVO = new ConfigurationVO();
    	configurationVO.setCONFIGURATION_NAME("QOS");
    	configurationVO = configurationService.getConfiguration(configurationVO);
    	
    	
		model.addAttribute("configurationVO", configurationVO);
    	
    	return "/v2/onem2m/qosInfo";
    }
    
    
    @RequestMapping(value="/qos/update.do")
    public String updateQos(@ModelAttribute("configurationVO") ConfigurationVO configurationVO, ModelMap model) throws Exception {

    	configurationVO = configurationService.updateConfiguration(configurationVO);


    	return "redirect:/onem2m/qos/info.do";
    }    

    
    @RequestMapping(value="/platform/list.do")
    public String listPlatform(ModelMap model) throws Exception {
    	
		model.addAttribute("resultList", platformService.listPlatform());
    	
    	return "/v2/onem2m/platformList";
    }

    
    @RequestMapping(value="/platform/new.do")
    public String newPlatform(ModelMap model) throws Exception {
    	
    	return "/v2/onem2m/platformNew";
    }

    
    @RequestMapping(value="/platform/insert.do")
    @ResponseBody
    public Map<String, Object> insertPlatform(@ModelAttribute("platformVO") PlatformVO platformVO) throws Exception {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("result", false);

		
		// check spId
		if (null != platformService.getPlatformBySpId(platformVO)) {
    		dataMap.put("message", "이미 등록된 SP ID입니다!");

    		return dataMap;
		}

		
		// insert platform
		platformService.insert(platformVO);
		dataMap.put("result", true);

		
		return dataMap;
    }
    
    
    @RequestMapping(value="/platform/info.do")
    public String infoPlatform(@ModelAttribute("platformVO") PlatformVO platformVO, ModelMap model) throws Exception {
    	
		model.addAttribute("platformVO", platformService.getPlatform(platformVO));
    	
    	return "/v2/onem2m/platformInfo";
    }

    
    @RequestMapping(value="/platform/update.do")
    @ResponseBody
    public Map<String, Object> updatePlatform(@ModelAttribute("platformVO") PlatformVO platformVO) throws Exception {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("result", false);

		// update platform
		platformService.updatePlatform(platformVO);
		dataMap.put("result", true);

		
		return dataMap;
    }

    
    @RequestMapping(value="/platform/delete.do")
    @ResponseBody
    public Map<String, Object> deletePlatform(@ModelAttribute("platformVO") PlatformVO platformVO) throws Exception {

		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("result", true);
    	
		platformService.deletePlatform(platformVO);

    	return dataMap;
    }

    
    @RequestMapping(value="/resource.do")
    public String resource(ModelMap model) throws Exception {


    	return "/v2/onem2m/resource";
    }    
    
    
	@RequestMapping(value = "/getResource.do")
	@ResponseBody
	public Map<String, Object> getResource(HttpServletRequest request, @RequestParam Map<String,String> allRequestParams) throws BizException, UserSysException {

		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("result", true);
		

		String url = HeritProperties.getProperty("Globals.oneM2MHostUrl") + StringUtil.nvl(request.getParameter("url"));
			
    	// make headers
    	Map<String, String> hadersMap = new HashMap<String, String>();
    	hadersMap.put("X-M2M-Origin", "C-INCSE-Admin");
    	hadersMap.put("X-M2M-RI", "1234");
    	hadersMap.put("Authorization", "Basic VVNFUklJRC1YMTIxMzEyMTIxOkl2MkZfQnZORHZKZ0l1RnhoQ0IwUjV2MjVGUQ==");
    	
    	// send message
    	try {
    		HttpResponse<String> response = Unirest.get(url).headers(hadersMap).asString();
    		
			dataMap.put("status", response.getStatus());
			dataMap.put("statusText", response.getStatusText());
			dataMap.put("headers", response.getHeaders());
			dataMap.put("body", response.getBody());
    	}
    	catch(UnirestException ex) {
			dataMap.put("result", false);
			dataMap.put("message", ex.toString());
    	}
    	
    	
		return dataMap;
	}
    
}
