package net.herit.business.api.service;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import net.herit.common.conf.HeritProperties;
import net.herit.common.exception.UserSysException;
import net.herit.iot.message.onem2m.OneM2mRequest.RESOURCE_TYPE;
import net.herit.iot.message.onem2m.OneM2mResponse.RESPONSE_STATUS;
import net.herit.iot.message.onem2m.format.Enums.CONTENT_TYPE;
import net.herit.iot.onem2m.ae.hubiss.AEControllerEx;
import net.herit.iot.onem2m.ae.hubiss.HubissEmulatorNotiHandler;
import net.herit.iot.onem2m.core.util.OneM2MException;
import net.herit.iot.onem2m.resource.AE;
import net.herit.iot.onem2m.resource.ContentInstance;
import net.herit.iot.onem2m.resource.FilterCriteria;

import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;

//@Repository("OneM2MApiService")
public class OneM2MApiService {
	//SingletonPattern
	private static OneM2MApiService INSTANCE;
	
	public static OneM2MApiService getInstance() {
		if (INSTANCE == null) {
			INSTANCE = new OneM2MApiService();
			return INSTANCE;
		}
		else return INSTANCE;
	}
	
	@SuppressWarnings("unused")
	private String oneM2MHost = "";
	@SuppressWarnings("unused")
	private int oneM2MPort = 9901;
	
	//private int aeTimeout = 10000;
	

	private String GLOBALS_AE_ID = "Globals.aeId";
	private String GLOBALS_AE_NAME = "Globals.aeName";
	private String GLOBALS_APP_ID = "Globals.appId";
	private String GLOBALS_APP_NAME = "Globals.appName";
	private String GLOBALS_CSE_ADDR = "Globals.cseAddr";
	private String GLOBALS_CSE_BASE = "Globals.csebase";
	private String GLOBALS_CSE_BASE_NAME = "Globals.csebaseName";
	private String GLOBALS_CSE_ID = "Globals.cseId";
	private String GLOBALS_IP = "Globals.ip";
	private String GLOBALS_PORT = "Globals.port";
	private String GLOBALS_POA = "Globals.poa";
	private String GLOBALS_AE_TIMEOUT = "Globals.aeTimeout";
	
	String aeId = HeritProperties.getProperty(GLOBALS_AE_ID);
	String aeName = HeritProperties.getProperty(GLOBALS_AE_NAME);
	String appId = HeritProperties.getProperty(GLOBALS_APP_ID);
	String appName = HeritProperties.getProperty(GLOBALS_APP_NAME);
	String cseAddr = HeritProperties.getProperty(GLOBALS_CSE_ADDR);
	String csebase = HeritProperties.getProperty(GLOBALS_CSE_BASE);
	String csebaseName = HeritProperties.getProperty(GLOBALS_CSE_BASE_NAME);
	String cseId = HeritProperties.getProperty(GLOBALS_CSE_ID);
	String ip = HeritProperties.getProperty(GLOBALS_IP);
	int port = Integer.valueOf(HeritProperties.getProperty(GLOBALS_PORT));
	String poa = HeritProperties.getProperty(GLOBALS_POA);
	int aeTimeout = Integer.parseInt(HeritProperties.getProperty(GLOBALS_AE_TIMEOUT));
	
	private OneM2MApiService() {
		oneM2MHost = HeritProperties.getProperty("Globals.ip");
		oneM2MPort = Integer.parseInt(HeritProperties.getProperty("Globals.port"));
		
		System.out.println("test: test1234");
		
	}
	
	AEControllerEx aeController;  
	HubissEmulatorNotiHandler notiHandler;
	//초기화
	@SuppressWarnings("unused")
	public void init() {
		try {

			// AE 컨트롤러 생성
			aeController = new AEControllerEx(cseAddr, cseId, csebaseName, CONTENT_TYPE.RES_XML, null);
			
			// Notification Handler 생성
			notiHandler = new HubissEmulatorNotiHandler(aeController);
			aeController.doHttpServerStart(ip, port, notiHandler);
			
			// AE 생성
			AE ae = aeController.doCreateAE(csebase, aeId, aeName, appId, appName, poa, true);
			
			/*OneM2MInitData.getInstance().data.put("notiHandler", notiHandler);
			OneM2MInitData.getInstance().data.put("aeController", aeController);
			OneM2MInitData.getInstance().data.put("ae", ae);*/

		} catch (OneM2MException oe) {

			RESPONSE_STATUS status = oe.getResponseStatusCode();
			System.out.println("Status:" + status.toString());

			System.out.println("OneM2MException occurred!!!");
			System.out.println(oe.toString());
			oe.printStackTrace();
			return;

		} catch (Exception e) {

			System.out.println("Exception occurred!!!");
			System.out.println(e.toString());
			e.printStackTrace();
			return;

		}
	}
	
	/** oneM2M read, execute (상태조회, 제어)*/
	public HashMap<String, Object> execute(String operation, ArrayList<String> resUris, String deviceUri, String exContent) 
		throws JsonGenerationException, JsonMappingException, IOException, UserSysException
	{
		System.out.println("here here here here here here here here here here here here here");
		System.out.println("operation : " + operation);
		System.out.println("deviceUri : " + deviceUri);
		
		HashMap<String, Object> res = new HashMap<String, Object>();
		
		try {
			ContentInstance ci;
			
			if (operation.equals("read")) {
				res.put("o", "r");//XXX
				for (int i=0; i < resUris.size(); i++) {
					String resourceUri = resUris.get(i);
					String creationTime = resUris.get(i)+"_"+i;
					System.out.println("resourceUri:" + resourceUri);
					System.out.println("creationTime : " + creationTime);
					
					ci = aeController.doGetLatestContent(resourceUri+"/Data", aeId);
					System.out.println(creationTime + ":" + ci.getCreationTime());
					System.out.println(resourceUri + ":" + ci.getContent());
					res.put(resourceUri, ci.getContent());
					res.put(creationTime, ci.getCreationTime());
					
				}
				//System.out.println("content:" + res.get("/herit-in/herit-cse/ae-gaslock1004/VALVE"));
				
				
			} else if (operation.equals("execute") || operation.equals("write")) {
				res.put("o", "e");
				ContentInstance ciCommand = new ContentInstance();
				ciCommand.setContentInfo("text/plain:0");
				// 웹에서 넘어온 제어 데이터
				ciCommand.setContent(exContent);
				//TODO:이것도 여러개 처리 해야하나...?
				System.out.println("resUris:" + resUris.get(0));
				System.out.println("exContent:" + exContent);
				
				ci = aeController.doControlCommand(resUris.get(0), aeId, ciCommand, aeTimeout);
				res.put(resUris.get(0), ci.getContent());
				System.out.println("Control result:" + (ci != null ? ci.getContent() : "null"));
				 
				
			}
			
		} catch (OneM2MException oe) {
			System.out.println("OneM2MException occurred!!!");
			System.out.println(oe.toString());
			oe.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return res;
	}
	
	/** oneM2M 디바이스 검색 (discovery) */
	public HashMap<String, Object> discovery(String operation, String sn) throws JsonGenerationException, JsonMappingException, IOException, UserSysException {
		System.out.println("discovery discovery discovery discovery discovery discovery discovery");
		System.out.println("operation :" + operation);
		System.out.println("sn :" + sn);
		
		
		HashMap<String, Object> res = new HashMap<String, Object>();
		//List<String> devIds = new ArrayList<String>();
		
		try {
			
			if (operation.equals("discovery")) {
				FilterCriteria fc = new FilterCriteria();
				fc.setResourceType(RESOURCE_TYPE.AE.Value());
				fc.addLabels(sn);
				
				//res.put("o", "dis");//XXX 
				List<String> devIds = aeController.doDiscovery(csebase, aeId, fc);
				System.out.println("devIds : " + devIds.toString());
				
				if (devIds == null || devIds.isEmpty()) {
					System.out.println("No device discovered.");
				} else {
					res.put(sn, devIds);
				}
			}
		} catch (Exception e) {
			System.out.println(e.toString());
			e.printStackTrace();
		}
		return res;
	}
}